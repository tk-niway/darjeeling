// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output = "../src/generated"
  // provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  auth0Id   String   @unique
  email     String   @unique
  name      String   @db.Text
  isActive  Boolean  @default(true)
  ownVideos        Video[] @relation(name:"ownerRelation")
  invitedVideos    Video[] @relation(name:"guestRelation")
  createdAt DateTime @default(dbgenerated("NOW(3)"))
  updatedAt DateTime @default(dbgenerated("NOW(3) ON UPDATE NOW(3)"))
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnailUrl  String?
  url         String?
  duration    Int?
  visibility    videoVisibility @default(private)
  uploadStatus  videoUploadStatus @default(pending)
  Owner       User @relation(fields: [ownerId], references: [id], name:"ownerRelation")
  ownerId     String
  guests      User[] @relation(name:"guestRelation")
  playCount   Int @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(dbgenerated("NOW(3)"))
  updatedAt   DateTime @default(dbgenerated("NOW(3) ON UPDATE NOW(3)"))
}

enum videoUploadStatus{
  pending
  processing
  completed
  failed
}

enum videoVisibility{
  public
  private
  limited
}