# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Mutation {
  createUser(data: UserCreateInput!): UserModel!
  deleteUser(where: UserWhereUniqueInput!): UserModel!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): UserModel!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  login(id: String!): UserModel!
  user(where: UserWhereUniqueInput!): UserModel!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [UserModel!]!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input UserCreateInput {
  auth0Id: String!
  createdAt: DateTime
  email: String
  id: String
  name: String
  updatedAt: DateTime
}

type UserModel {
  """Auth0 ID"""
  auth0Id: ID!

  """Created at"""
  createdAt: DateTime!

  """Email"""
  email: String

  """User ID"""
  id: ID!

  """Name"""
  name: String

  """Updated at"""
  updatedAt: DateTime!
}

input UserOrderByWithRelationInput {
  auth0Id: SortOrder
  createdAt: SortOrder
  email: SortOrderInput
  id: SortOrder
  name: SortOrderInput
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  auth0Id
  createdAt
  email
  id
  name
  updatedAt
}

input UserUpdateInput {
  auth0Id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  auth0Id: StringFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  auth0Id: String
  createdAt: DateTimeFilter
  email: String
  id: String
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}